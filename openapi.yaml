openapi: 3.0.1
info:
  title: Delilah Resto
  description: This is an API REST built to manage a food stores orders
  contact:
    email: gonzalovega7@gmail.com
  version: 1.0.0
servers:
  - url: http://localhost:3000
tags:
- name: user
  description: Access to existing users
- name: product
  description: Access to available products
- name: order
  description: Access to users orders
paths:
  /users:
    get:
      tags:
      - user
      summary: Fetch existing users
      operationId: getUsers
      parameters:
      - name: token
        in: header
        schema:
          type: string
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            text/plain:
              schema:
                type: string
        500:
          description: server error
          content:
            application/json:
              schema:
                type: object
                items: {}
    post:
      tags:
      - user
      summary: Create user
      description: This can be done by a new customer.
      operationId: createUser
      requestBody:
        description: User object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid Order
          content: {}
  /users/{username}:
    get:
      tags:
      - user
      summary: Get user
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing.'
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
    put:
      tags:
      - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
          content: {}
        404:
          description: User not found
          content: {}
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
  /login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /products:
    get:
      tags:
      - product
      summary: Fetch existing products
      operationId: getProduct
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      tags:
      - product
      summary: Add a new product to the store
      operationId: createProduct
      requestBody:
        description: Product object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        201:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        405:
          description: Invalid input
          content: {}
  /products/{id}:
    get:
      tags:
      - product
      summary: Find product by ID
      description: Returns a single product
      operationId: getProductById
      parameters:
      - name: id
        in: path
        description: ID of product to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Product not found
          content: {}
    put:
      tags:
      - product
      summary: Update an existing product
      operationId: updateProduct
      parameters:
      - name: id
        in: path
        description: ID of product to return
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Product object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Product not found
          content: {}
        405:
          description: Validation exception
          content: {}
    delete:
      tags:
      - product
      summary: Deletes a product
      operationId: deleteProduct
      parameters:
      - name: token
        in: header
        schema:
          type: string
        required: true
      - name: id
        in: path
        description: Product ID to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        204:
          description: successful operation (deleted)
          content: {}
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Product not found
          content: {}
  /orders:
    get:
      tags:
      - order
      summary: Fetch existing orders
      operationId: getOrders
      parameters:
      - name: token
        in: header
        schema:
          type: string
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      tags:
      - order
      summary: Place an order
      operationId: newOrder
      requestBody:
        description: order placed
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid Order
          content: {}
  /order/findByStatus:
    get:
      tags:
      - order
      summary: Finds Orders by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findOrdersByStatus
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: available
            enum:
            - available
            - pending
            - sold
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        400:
          description: Invalid status value
          content: {}
  /orders/{id}:
    get:
      tags:
      - order
      summary: Find purchase order by ID
      description: Get order by order ID
      operationId: getOrderById
      parameters:
      - name: id
        in: path
        description: ID of order that needs to be fetched
        required: true
        schema:
          minimum: 1.0
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
    delete:
      tags:
      - order
      summary: Delete purchase order by ID
      description: ID of product that needs to be deleted
      operationId: deleteOrder
      parameters:
      - name: id
        in: path
        description: ID of the order that needs to be deleted
        required: true
        schema:
          minimum: 1.0
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1001
        username:
          type: string
          example: 'maosierra'
        password:
          type: string
          example: 'acamica'
        fullname:
          type: string
          example: 'Mauricio Sierra'
        email:
          type: string
          example: 'maosierra@gmail.com'
        mobile:
          type: string
          example: '+54-221-2112421'
        address:
          type: string
          example: 'Calle Alvear 233'
        is_deleted:
          type: boolean
          default: false
        is_admin:
          type: boolean
          default: false
      xml:
        name: User
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 101
        description:
          type: string
          example: 'Bagel de jamón'
        picture:
          type: string
          description: URI of picture
          example: "/img/bageldejamon.jpg"
        price:
          type: number
          example: 240
        is_deleted:
          type: boolean
          default: false
      xml:
        name: Product
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10001
        created_at:
          type: string
          format: date-time
        payment:
          type: string
          description: Payment Method
          enum:
          - cash
          - credit
          example: cash
        status:
          type: string
          description: Order Status
          enum:
          - new
          - confirmed
          - preparing
          - delivering
          - canceled
          - delivered
          example: new
        is_deleted:
          type: boolean
          default: false
        userId:
          type: integer
          format: int64
          example: 1001
      xml:
        name: Order